import { apiService } from '../services/ApiService.js';

export class Calendar {
    constructor(app) {
        console.log('Calendar constructor started');
        this.app = app;
        this.element = document.getElementById('calendarScreen');
        this.currentDate = new Date();
        this.moods = [];
        this.init();
        console.log('Calendar constructor finished');
    }

    async init() {
        console.log('Calendar init started');
        this.initEventListeners();
        await this.loadMoods();
        console.log('Calendar init finished');
    }

    initEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
        this.element.querySelector('#prevMonth')?.addEventListener('click', () => {
            this.currentDate.setMonth(this.currentDate.getMonth() - 1);
            this.render();
        });

        this.element.querySelector('#nextMonth')?.addEventListener('click', () => {
            this.currentDate.setMonth(this.currentDate.getMonth() + 1);
            this.render();
        });
    }

    async loadMoods() {
        try {
            this.moods = await apiService.getMoods();
            this.render();
        } catch (error) {
            console.error('Error loading moods:', error);
        }
    }

    getMoodForDate(date) {
        return this.moods.find(mood => {
            const moodDate = new Date(mood.date);
            return moodDate.toDateString() === date.toDateString();
        });
    }

    getMoodEmoji(level) {
        const emojis = ['üò¢', 'üòï', 'üòê', 'üôÇ', 'üòä'];
        return emojis[level - 1] || 'üòê';
    }

    render() {
        const year = this.currentDate.getFullYear();
        const month = this.currentDate.getMonth();

        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);

        // –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞ (0 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –∏ —Ç.–¥.)
        const firstDayOfWeek = firstDay.getDay();
        const totalDays = lastDay.getDate();

        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        const monthNames = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', 
                          '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
        
        this.element.innerHTML = `
            <div class="bg-white rounded-lg shadow-lg p-6">
                <div class="flex justify-between items-center mb-6">
                    <button id="prevMonth" class="text-gray-600 hover:text-gray-800">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <h2 class="text-2xl font-bold">${monthNames[month]} ${year}</h2>
                    <button id="nextMonth" class="text-gray-600 hover:text-gray-800">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>

                <div class="grid grid-cols-7 gap-2">
                    ${['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'].map(day => `
                        <div class="text-center font-semibold text-gray-600">${day}</div>
                    `).join('')}

                    ${Array.from({ length: firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1 }, (_, i) => `
                        <div class="aspect-square"></div>
                    `).join('')}

                    ${Array.from({ length: totalDays }, (_, i) => {
                        const date = new Date(year, month, i + 1);
                        const mood = this.getMoodForDate(date);
                        const isToday = date.toDateString() === new Date().toDateString();
                        
                        return `
                            <div class="aspect-square border rounded-lg p-1 ${
                                isToday ? 'border-primary' : 'border-gray-200'
                            }">
                                <div class="text-sm text-gray-600">${i + 1}</div>
                                ${mood ? `
                                    <div class="text-2xl text-center mt-1">
                                        ${this.getMoodEmoji(mood.mood_level)}
                                    </div>
                                ` : ''}
                            </div>
                        `;
                    }).join('')}
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        this.initEventListeners();
    }

    show() {
        console.log('Calendar show started');
        this.element.classList.add('active');
        this.loadMoods(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ
        console.log('Calendar show finished');
    }

    hide() {
        console.log('Calendar hide started');
        this.element.classList.remove('active');
        console.log('Calendar hide finished');
    }
} 